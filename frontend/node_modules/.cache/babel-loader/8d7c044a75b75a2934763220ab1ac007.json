{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\MEGA Drive\\\\Uni\\\\Third Year\\\\COS301\\\\Capstone\\\\Code\\\\Github\\\\Audio-Suite\\\\frontend\\\\src\\\\components\\\\UserCenter.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; // Agora.io Audio Libraries\n\nimport { createClient, createMicrophoneAudioTrack } from \"agora-rtc-react\";\nimport '../CSS/UserCenter.css';\nimport UserSideBar from './UserSideBar';\nimport FloorPlan from './FloorPlan';\nimport TextChannel from './TextChannel';\nimport Col from 'react-bootstrap/Col';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row'; // Agora Config\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst clientConfig = {\n  mode: \"rtc\",\n  codec: \"vp8\"\n};\nconst useClient = createClient(clientConfig);\nconst appId = \"7afb53157f754f6f8023f31fb343404a\";\nconst token = \"0067afb53157f754f6f8023f31fb343404aIACGoCNjvOJJ54fH6kkdnC1VPZlHa50LQvTt1uF+9v2QSRRkBDcAAAAAEABFAsi6k7/PYAEAAQCTv89g\";\nconst channel = \"AUDIO CHANNEL\";\nconst apiURL = \"http://127.0.0.1:3001\";\nvar uid = null;\nvar username = null;\nvar usersList = [];\nvar usernameList = [];\nvar currOffice = '';\nvar officesList = [];\nvar officeIDs = [];\nvar officesCollected = false;\nvar roomsList = [];\nvar roomIDs = [];\nvar currRoom = '';\nvar userIDsAndRooms = [];\nvar track = null;\n\nfunction UserCenter({\n  userJWT\n}) {\n  _s();\n\n  // -------------------------- REACT STATES --------------------------\n  const [pageChanges, setPageChanges] = useState(false);\n  const [currentOffice, setCurrentOffice] = useState('');\n  const [currentOfficeInvite, setCurrentOfficeInvite] = useState('');\n  const [usernames, setUsernames] = useState();\n  const [offices, setOffices] = useState();\n  const [rooms, setRooms] = useState();\n  const [currentRoom, setCurrentRoom] = useState('');\n  const [selectedTab, setSelectedTab] = useState('floorPlan');\n\n  const changeCurrentOfficeTo = Office => {\n    setCurrentOffice(Office);\n  };\n\n  const changeCurrentRoomTo = Room => {\n    setCurrentRoom(Room);\n  };\n\n  const updateUsers = () => {\n    setUsernames({});\n  };\n\n  const updateOffices = () => {\n    setOffices({});\n  };\n\n  const updateRooms = () => {\n    setRooms({});\n  }; // ------------------------------------------------------------------\n  // ------------------ GET USERNAME OF CURRENT USER ------------------\n\n\n  fetchUserDetails().then(result => {\n    if (result != null && result.id != null) {\n      /* SET VALUES FROM RESPONSE */\n      uid = result.id;\n      username = result.userName;\n    } else {\n      console.log('Invalid JWT.');\n    }\n  }); // ------------------------------------------------------------------\n  // --------------- GET OFFICES THAT USER IS A PART OF ---------------\n\n  if (!officesCollected) {\n    fetchUserOffices().then(result => {\n      if (result != null && result.Offices != null) {\n        /* SET VALUES FROM RESPONSE */\n        for (var x = 0; x < result.Offices.length; x++) {\n          const office = \"\" + result.Offices[x].name;\n          const id = \"\" + result.Offices[x].id;\n          const invite = \"\" + result.Offices[x].invite;\n\n          const newOfficeButton = /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                block: true,\n                onClick: async () => {\n                  await joinOffice(office);\n                  updateOffices([]);\n                  updateRooms([]);\n                  setCurrentOfficeInvite(invite);\n                },\n                children: office\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 64\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 59\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 45\n          }, this);\n\n          if (officesList.length < result.Offices.length) {\n            officesList.push(newOfficeButton);\n            officeIDs.push([id, office]);\n          }\n        }\n\n        officesCollected = true;\n        console.log(\"OFFICES RETRIEVED.\");\n      } else {\n        console.log('Invalid JWT.');\n      }\n\n      updateOffices([]);\n    });\n  } // ------------------------------------------------------------------\n  // Create Client and Mic Track\n\n\n  const [remoteUsers, setRemoteUsers] = useState([]);\n  const client = useClient();\n  const useMicrophoneTrack = createMicrophoneAudioTrack();\n  track = useMicrophoneTrack()['track']; // Function to initialise the SDK\n\n  let init = async () => {\n    console.log(\"--------------------- INIT ---------------------\");\n    console.log(\"TRACK: \" + track);\n    setRemoteUsers([]);\n    client.on(\"user-published\", async (user, mediaType) => {\n      console.log(\"USER FOUND!\");\n      await client.subscribe(user, mediaType);\n      fetchRemoteUsernames(user).then(result => {\n        if (result != null && result.userName != null) {\n          /* SET VALUES FROM RESPONSE */\n          usernameList.push([result.id + \"\", \"\" + result.userName]);\n          updateUsers([]); // ----------------- GET ROOM OF REMOTE USER -----------------\n\n          fetchRemoteUserRoom(result.id).then(res => {\n            console.log(res.UserID + \":\" + res.RoomID);\n\n            if (!userIDsAndRooms.includes([res.UserID, res.RoomID])) {\n              userIDsAndRooms.push([res.UserID, res.RoomID]);\n              console.log(\"========++++++======= PEGASUS ========++++++=======\");\n            }\n\n            console.log(\"xxxxxxxxxxxxxxxx HERE xxxxxxxxxxxxxxxx\");\n            updateOffices({});\n          }); // -------------------------------------------------------------\n        } else {\n          console.log('Invalid User ID.');\n        }\n      });\n      console.log(\"subscribe success\");\n\n      if (mediaType === \"audio\") {\n        var _user$audioTrack;\n\n        usersList.push(\"\" + user.uid);\n        setRemoteUsers(usersList);\n\n        if (user.uid == 27 || user.uid == 25) {\n          user.audioTrack.setVolume(15);\n        } else {\n          user.audioTrack.setVolume(125);\n        }\n\n        (_user$audioTrack = user.audioTrack) === null || _user$audioTrack === void 0 ? void 0 : _user$audioTrack.play();\n        updateUsers([]);\n      }\n    });\n    client.on(\"user-unpublished\", (user, type) => {\n      console.log(\"unpublished\", user, type);\n\n      if (type === \"audio\") {\n        var _user$audioTrack2;\n\n        (_user$audioTrack2 = user.audioTrack) === null || _user$audioTrack2 === void 0 ? void 0 : _user$audioTrack2.stop();\n      }\n    });\n    client.on(\"user-left\", user => {\n      var tmp = [];\n\n      for (var x = 0; x < usersList.length; x++) {\n        if (usersList[x] !== \"\" + user.uid) {\n          tmp.push(usersList[x]);\n        }\n      }\n\n      usersList = tmp;\n      setRemoteUsers(tmp);\n      console.log(\"leaving\", user);\n      updateUsers([]);\n    });\n    console.log(\"JOINING...\");\n    await client.join(appId, channel, token, uid);\n    console.log(\"JOINED.\");\n    console.log(\"TRACK PRE PUB: \" + track);\n\n    if (track) {\n      console.log(\"PUBLISHING.\");\n      await client.publish(track);\n    }\n  };\n\n  let join = async room => {\n    console.log(\"--------------------- JOIN ---------------------\");\n\n    if (currentRoom !== room) {\n      if (currRoom !== '') {\n        console.log(\"LEAVE ROOM\");\n        await leave(\"room\");\n      }\n\n      changeCurrentRoomTo(room);\n      currRoom = room;\n      setRemoteUsers([]);\n      usernameList = [];\n\n      if (client.connectionState !== 'CONNECTED') {\n        console.log(\"init ready\");\n        await init(channel);\n      }\n      /* ADD USER TO ROOM IN DB */\n      // Get ID of current office\n\n\n      var currentOfficeID = null;\n\n      for (var i = 0; i < officeIDs.length; i++) {\n        if (officeIDs[i][1] === currOffice) {\n          currentOfficeID = officeIDs[i][0];\n        }\n      } // Get ID of current Room\n\n\n      var currentRoomID = null;\n\n      for (i = 0; i < roomIDs.length; i++) {\n        if (roomIDs[i][1] === room) {\n          currentRoomID = roomIDs[i][0];\n        }\n      }\n\n      fetchJoinRoom(currentRoomID, currentOfficeID).then(res => {\n        if (res.status === 400) {\n          console.log('Invalid JWT or Office/Room ID.');\n        } else {\n          console.log(\"JOINED ROOM: \" + room);\n        }\n      });\n    } else {\n      await leave(\"room\");\n    }\n  };\n\n  async function leave(type) {\n    console.log(\"--------------------- LEAVE ---------------------\");\n    client.on(\"user-published\", async (user, mediaType) => {\n      await client.unsubscribe(user, mediaType);\n      console.log(\"unsubscribe success\");\n\n      if (mediaType === \"audio\") {\n        var _user$audioTrack3;\n\n        (_user$audioTrack3 = user.audioTrack) === null || _user$audioTrack3 === void 0 ? void 0 : _user$audioTrack3.stop();\n      }\n    });\n    client.on(\"user-unpublished\", (user, type) => {\n      console.log(\"unpublished\", user, type);\n\n      if (type === \"audio\") {\n        var _user$audioTrack4, _user$audioTrack5;\n\n        (_user$audioTrack4 = user.audioTrack) === null || _user$audioTrack4 === void 0 ? void 0 : _user$audioTrack4.stop();\n        (_user$audioTrack5 = user.audioTrack) === null || _user$audioTrack5 === void 0 ? void 0 : _user$audioTrack5.close();\n      }\n    });\n    client.on(\"user-left\", user => {\n      console.log(\"leaving\", user);\n    });\n    /* REMOVE USER FROM ROOM IN DB */\n    // Get ID of current office\n\n    var currentOfficeID = null;\n\n    for (var i = 0; i < officeIDs.length; i++) {\n      if (officeIDs[i][1] === currOffice) {\n        currentOfficeID = officeIDs[i][0];\n      }\n    }\n\n    console.log(\"Current Office: \" + currentOfficeID); // Get ID of current Room\n\n    var currentRoomID = null;\n\n    for (i = 0; i < roomIDs.length; i++) {\n      if (roomIDs[i][1] === currRoom) {\n        currentRoomID = roomIDs[i][0];\n      }\n    }\n\n    console.log(\"Current Room: \" + currentRoomID);\n    fetchLeaveRoom(currentRoomID, currentOfficeID).then(res => {\n      if (res.status === 400) {\n        console.log('Invalid JWT or Office/Room ID.');\n      } else {\n        console.log(\"LEFT ROOM: \" + currentRoom);\n        currRoom = '';\n      }\n\n      console.log(\"FETCH COMPLETE\");\n    });\n\n    if (type === \"office\") {\n      changeCurrentOfficeTo('');\n      currOffice = '';\n    }\n\n    usersList = [];\n    userIDsAndRooms = [];\n    setRemoteUsers([]);\n    await client.unpublish();\n    await client.leave();\n    changeCurrentRoomTo('');\n    setCurrentOfficeInvite('');\n    currRoom = '';\n  }\n\n  ;\n\n  let joinOffice = async name => {\n    console.log(\"--------------------- JOIN OFFICE ---------------------\");\n\n    if (currentRoom !== '') {\n      leave(\"office\");\n      changeCurrentRoomTo('');\n    }\n\n    changeCurrentOfficeTo(name);\n    currOffice = name;\n    roomsList = [];\n    roomIDs = []; // ------------------ GET ROOMS IN CURRENT OFFICE ------------------\n\n    var currentOfficeID = null;\n\n    for (var i = 0; i < officeIDs.length; i++) {\n      if (officeIDs[i][1] === name) {\n        currentOfficeID = officeIDs[i][0];\n      }\n    }\n\n    fetchOfficeRooms(currentOfficeID).then(result => {\n      if (result != null && result.Rooms != null) {\n        for (var x = 0; x < result.Rooms.length; x++) {\n          const room = \"\" + result.Rooms[x].roomName;\n          const id = \"\" + result.Rooms[x].id;\n\n          const newRoomButton = /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              width: \"50%\"\n            },\n            variant: \"secondary\",\n            block: true,\n            onClick: async () => {\n              await join(room);\n            },\n            children: room\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 43\n          }, this);\n\n          if (roomsList.length < result.Rooms.length) {\n            roomsList.push(newRoomButton);\n            roomIDs.push([id, room]);\n          }\n        }\n\n        updateOffices([]);\n      } else {\n        console.log('Invalid JWT.');\n      }\n\n      updateOffices([]);\n    }); // ------------------------------------------------------------------\n  };\n\n  async function updateUserOfficeList() {\n    fetchUserOffices().then(result => {\n      if (result != null && result.Offices != null) {\n        /* SET VALUES FROM RESPONSE */\n        for (var x = 0; x < result.Offices.length; x++) {\n          const office = \"\" + result.Offices[x].name;\n          const id = \"\" + result.Offices[x].id;\n          const invite = \"\" + result.Offices[x].invite;\n\n          const newOfficeButton = /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                block: true,\n                onClick: async () => {\n                  await joinOffice(office);\n                  updateOffices([]);\n                  updateRooms([]);\n                  setCurrentOfficeInvite(invite);\n                },\n                children: office\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 64\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 59\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 45\n          }, this);\n\n          if (officesList.length < result.Offices.length) {\n            officesList.push(newOfficeButton);\n            officeIDs.push([id, office]);\n          }\n        }\n\n        officesCollected = true;\n        console.log(\"OFFICES RETRIEVED.\");\n      } else {\n        console.log('Invalid JWT.');\n      }\n\n      updateOffices([]);\n    });\n  }\n\n  function getUserOffices() {\n    console.log(\"--------------------- GET USER OFFICES ---------------------\");\n    var tmp = [];\n\n    for (var i = 0; i < officesList.length; i++) {\n      if (!tmp.includes(officesList[i])) {\n        tmp.push(officesList[i]);\n        tmp.push( /*#__PURE__*/_jsxDEV(\"br\", {}, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 26\n        }, this));\n      }\n    }\n\n    return tmp;\n  }\n\n  function getOfficeRooms() {\n    console.log(\"--------------------- GET OFFICE ROOMS ---------------------\");\n    var tmp = [];\n\n    for (var i = 0; i < roomsList.length; i++) {\n      if (!tmp.includes(roomsList[i])) {\n        tmp.push([roomsList[i]]);\n        tmp.push( /*#__PURE__*/_jsxDEV(\"br\", {}, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 26\n        }, this));\n      }\n    }\n\n    return tmp;\n  }\n\n  function getRemoteUsers() {\n    console.log(\"--------------------- GET REMOTE USERS ---------------------\");\n    var users = [];\n    usersList = [];\n    var userNames = [];\n\n    if (username !== null && currentRoom !== '') {\n      userNames.push(\"\" + username + \"\\n\");\n    }\n\n    if (remoteUsers.length !== 0) {\n      for (var i = 0; i < remoteUsers.length; i++) {\n        if (!users.includes(\"\\n\" + remoteUsers[i])) {\n          users.push(\"\\n\" + remoteUsers[i]);\n          usersList.push(\"\" + remoteUsers[i]);\n        }\n      }\n    }\n\n    if (!users.includes(\"\\n\" + uid)) {\n      users.push(\"\\n\" + uid);\n      usersList.push(\"\" + uid);\n    } // SEPARATING USERS INTO ROOMS (BUGGY...)\n\n    /*var userRooms = [];\r\n    for(var a=0;a<usersList.length;a++){\r\n        console.log(\"---- 1 ----\");\r\n        for(var k=0;k<userIDsAndRooms;k++){\r\n            console.log(\"---- 2 ----\");\r\n            if(usersList[a] == userIDsAndRooms[k][0]){\r\n                console.log(\"---- 3 ----\");\r\n                for(var p=0;p<roomIDs.length;p++){\r\n                    console.log(\"---- 5 ----\");\r\n                    if(userIDsAndRooms[k][1] == roomIDs[p][0]){\r\n                        console.log(\"---- 6 ----\");\r\n                        if(!userRooms.includes([\"\"+usersList[a], \"\"+roomIDs[p][1]])){\r\n                            console.log(\"---- 7 ----\");\r\n                            userRooms.push([\"\"+usersList[a], \"\"+roomIDs[p][1]]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\n\n\n    for (var x = 0; x < usernameList.length; x++) {\n      if (usersList.includes(\"\" + usernameList[x][0]) && !userNames.includes(\"\" + usernameList[x][1] + \"\\n\")) {\n        //for(var z=0;z<userRooms.length;i++){\n        //if(userRooms[z][0] == usernameList[x][0]){\n        //userNames.push(\"\"+usernameList[x][1]+\"(\"+userRooms[z][1]+\")\\n\");\n        userNames.push(\"\" + usernameList[x][1] + \"\\n\");\n        console.log(userNames); //}\n        //}\n      }\n    }\n\n    return userNames;\n  } // ------------------------ FETCH FUNCTIONS ------------------------\n\n\n  async function fetchRemoteUserRoom(userID) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt: userJWT,\n        userID: userID\n      })\n    };\n    const res = await fetch(apiURL + \"/api/room/findUser\", requestOptions);\n    const results = await res.json();\n    return results;\n  }\n\n  async function fetchUserOffices() {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt: userJWT\n      })\n    };\n    const res = await fetch(apiURL + \"/api/office/getUserOffices\", requestOptions);\n    const results = await res.json();\n    return results;\n  }\n\n  async function fetchUserDetails() {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt: userJWT\n      })\n    };\n    const res = await fetch(apiURL + \"/api/user/details\", requestOptions);\n    const results = await res.json();\n    return results;\n  }\n\n  async function fetchRemoteUsernames(user) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: user.uid + \"\"\n      })\n    };\n    const res = await fetch(apiURL + \"/api/user/getUsernameById\", requestOptions);\n    const results = await res.json();\n    return results;\n  }\n\n  async function fetchJoinRoom(currentRoomID, currentOfficeID) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt: userJWT,\n        officeID: currentOfficeID,\n        roomID: currentRoomID\n      })\n    };\n    const res = await fetch(apiURL + \"/api/room/join\", requestOptions);\n    return res;\n  }\n\n  async function fetchLeaveRoom(currentRoomID, currentOfficeID) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt: userJWT,\n        officeID: currentOfficeID,\n        roomID: currentRoomID\n      })\n    };\n    const res = await fetch(apiURL + \"/api/room/leave\", requestOptions);\n    return res;\n  }\n\n  async function fetchOfficeRooms(currentOfficeID) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jwt: userJWT,\n        officeID: currentOfficeID\n      })\n    };\n    const res = await fetch(apiURL + \"/api/room/getOfficeRooms\", requestOptions);\n    const results = await res.json();\n    return results;\n  } // -----------------------------------------------------------------\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      md: 3,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(UserSideBar, {\n        jwt: userJWT,\n        officeSelected: currentOffice,\n        leaveOffice: leave,\n        getOffices: getUserOffices,\n        joinOffice: joinOffice,\n        updateOffices: updateOffices,\n        updateRooms: updateRooms,\n        currentOfficeInviteCode: currentOfficeInvite,\n        updateUserOfficeList: updateUserOfficeList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      md: 9,\n      lg: 10,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"TabbedPane\",\n        children: currentOffice === '' ? /*#__PURE__*/_jsxDEV(\"center\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Please select an Office.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Tabs, {\n          id: \"UserContent-tab\",\n          activeKey: selectedTab,\n          onSelect: k => setSelectedTab(k),\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            eventKey: \"floorPlan\",\n            title: \"Floor Plan\",\n            children: /*#__PURE__*/_jsxDEV(FloorPlan, {\n              officeSelected: currentOffice,\n              join: join,\n              getRemoteUsers: getRemoteUsers,\n              getOfficeRooms: getOfficeRooms\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            eventKey: \"textChannel\",\n            title: \"Text Channel\",\n            children: /*#__PURE__*/_jsxDEV(TextChannel, {\n              officeSelected: currentOffice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserCenter, \"qr28umn35DuyFkhjt4JOAmO7gAA=\", false, function () {\n  return [useClient, useMicrophoneTrack];\n});\n\n_c = UserCenter;\nexport default UserCenter;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserCenter\");","map":{"version":3,"sources":["C:/Users/chris/Desktop/MEGA Drive/Uni/Third Year/COS301/Capstone/Code/Github/Audio-Suite/frontend/src/components/UserCenter.js"],"names":["useState","createClient","createMicrophoneAudioTrack","UserSideBar","FloorPlan","TextChannel","Col","Tabs","Tab","Button","Row","clientConfig","mode","codec","useClient","appId","token","channel","apiURL","uid","username","usersList","usernameList","currOffice","officesList","officeIDs","officesCollected","roomsList","roomIDs","currRoom","userIDsAndRooms","track","UserCenter","userJWT","pageChanges","setPageChanges","currentOffice","setCurrentOffice","currentOfficeInvite","setCurrentOfficeInvite","usernames","setUsernames","offices","setOffices","rooms","setRooms","currentRoom","setCurrentRoom","selectedTab","setSelectedTab","changeCurrentOfficeTo","Office","changeCurrentRoomTo","Room","updateUsers","updateOffices","updateRooms","fetchUserDetails","then","result","id","userName","console","log","fetchUserOffices","Offices","x","length","office","name","invite","newOfficeButton","joinOffice","push","remoteUsers","setRemoteUsers","client","useMicrophoneTrack","init","on","user","mediaType","subscribe","fetchRemoteUsernames","fetchRemoteUserRoom","res","UserID","RoomID","includes","audioTrack","setVolume","play","type","stop","tmp","join","publish","room","leave","connectionState","currentOfficeID","i","currentRoomID","fetchJoinRoom","status","unsubscribe","close","fetchLeaveRoom","unpublish","fetchOfficeRooms","Rooms","roomName","newRoomButton","width","updateUserOfficeList","getUserOffices","getOfficeRooms","getRemoteUsers","users","userNames","userID","requestOptions","method","headers","body","JSON","stringify","jwt","fetch","results","json","officeID","roomID","k"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\n\r\n// Agora.io Audio Libraries\r\nimport { createClient, createMicrophoneAudioTrack } from \"agora-rtc-react\";\r\n\r\nimport '../CSS/UserCenter.css'\r\n\r\nimport UserSideBar from './UserSideBar'\r\nimport FloorPlan from './FloorPlan'\r\nimport TextChannel from './TextChannel'\r\n\r\nimport Col from 'react-bootstrap/Col'\r\nimport Tabs from 'react-bootstrap/Tabs'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Row from 'react-bootstrap/Row'\r\n\r\n// Agora Config\r\nconst clientConfig = { \r\n    mode: \"rtc\", codec: \"vp8\",\r\n};\r\nconst useClient = createClient(clientConfig);\r\nconst appId = \"7afb53157f754f6f8023f31fb343404a\";\r\nconst token = \"0067afb53157f754f6f8023f31fb343404aIACGoCNjvOJJ54fH6kkdnC1VPZlHa50LQvTt1uF+9v2QSRRkBDcAAAAAEABFAsi6k7/PYAEAAQCTv89g\";\r\nconst channel = \"AUDIO CHANNEL\";\r\nconst apiURL = \"http://127.0.0.1:3001\";\r\n\r\nvar uid = null; \r\nvar username = null;\r\nvar usersList = [];\r\nvar usernameList = [];\r\nvar currOffice = '';\r\nvar officesList = [];\r\nvar officeIDs = [];\r\nvar officesCollected = false;\r\nvar roomsList = [];\r\nvar roomIDs = [];\r\nvar currRoom = '';\r\nvar userIDsAndRooms = [];\r\nvar track = null;\r\n\r\nfunction UserCenter({userJWT}){\r\n    // -------------------------- REACT STATES --------------------------\r\n    const [pageChanges, setPageChanges] = useState(false);\r\n    const [currentOffice, setCurrentOffice] = useState('');\r\n    const [currentOfficeInvite, setCurrentOfficeInvite] = useState('');\r\n    const [usernames, setUsernames] = useState();\r\n    const [offices, setOffices] = useState();\r\n    const [rooms, setRooms] = useState();\r\n    const [currentRoom, setCurrentRoom] = useState('');\r\n    const [selectedTab, setSelectedTab] = useState('floorPlan');\r\n\r\n    const changeCurrentOfficeTo = (Office) => {\r\n        setCurrentOffice(Office);\r\n    }\r\n\r\n    const changeCurrentRoomTo = (Room) => {\r\n        setCurrentRoom(Room);\r\n    }\r\n\r\n    const updateUsers = () => {\r\n        setUsernames({});\r\n    }\r\n\r\n    const updateOffices = () => {\r\n        setOffices({});\r\n    }\r\n\r\n    const updateRooms = () => {\r\n        setRooms({});\r\n    }\r\n    // ------------------------------------------------------------------\r\n\r\n    // ------------------ GET USERNAME OF CURRENT USER ------------------\r\n    fetchUserDetails().then(result => {\r\n            if(result != null && result.id != null)\r\n            {\r\n                /* SET VALUES FROM RESPONSE */\r\n                uid = result.id;\r\n                username = result.userName;\r\n            }\r\n            else\r\n            {\r\n                console.log('Invalid JWT.');\r\n            }\r\n        }\r\n    )\r\n    // ------------------------------------------------------------------\r\n\r\n    // --------------- GET OFFICES THAT USER IS A PART OF ---------------\r\n    if(!officesCollected){\r\n        fetchUserOffices().then(result => {\r\n            if(result != null && result.Offices != null)\r\n            {\r\n                /* SET VALUES FROM RESPONSE */\r\n                for(var x=0;x<result.Offices.length;x++){\r\n                    const office = \"\"+result.Offices[x].name;\r\n                    const id = \"\"+result.Offices[x].id;\r\n                    const invite = \"\" + result.Offices[x].invite;\r\n                    const newOfficeButton = <Row key={id}><Col><Button variant=\"primary\" block onClick={ async () => {await joinOffice(office); updateOffices([]); updateRooms([]); setCurrentOfficeInvite(invite); } }>{office}</Button></Col></Row>;\r\n                    if(officesList.length < result.Offices.length){\r\n                        officesList.push(newOfficeButton)\r\n                        officeIDs.push([id,office]);\r\n                    }\r\n                }\r\n                officesCollected = true;\r\n                console.log(\"OFFICES RETRIEVED.\")\r\n            }\r\n            else\r\n            {\r\n                console.log('Invalid JWT.');\r\n            } \r\n            updateOffices([]);\r\n        }\r\n        )\r\n    }\r\n    // ------------------------------------------------------------------\r\n        \r\n    // Create Client and Mic Track\r\n    const [remoteUsers, setRemoteUsers] = useState([]);\r\n    const client = useClient();\r\n    const useMicrophoneTrack = createMicrophoneAudioTrack();\r\n    track = useMicrophoneTrack()['track'];\r\n\r\n    // Function to initialise the SDK\r\n    let init = async () => {\r\n        console.log(\"--------------------- INIT ---------------------\");\r\n        console.log(\"TRACK: \"+track);\r\n        setRemoteUsers([]);\r\n        client.on(\"user-published\", async (user, mediaType) => {\r\n            console.log(\"USER FOUND!\");\r\n            await client.subscribe(user, mediaType);\r\n            \r\n            fetchRemoteUsernames(user).then(\r\n                (result) => {\r\n                    if(result != null && result.userName != null){\r\n                        /* SET VALUES FROM RESPONSE */\r\n                        usernameList.push([result.id+\"\" ,\"\"+result.userName]);\r\n                        updateUsers([]);\r\n\r\n                        // ----------------- GET ROOM OF REMOTE USER -----------------\r\n                        fetchRemoteUserRoom(result.id).then(res => {\r\n                            console.log(res.UserID+\":\"+res.RoomID);\r\n                            if(!userIDsAndRooms.includes([res.UserID, res.RoomID])){\r\n                                userIDsAndRooms.push([res.UserID, res.RoomID]);\r\n                                console.log(\"========++++++======= PEGASUS ========++++++=======\");\r\n                            }\r\n                            console.log(\"xxxxxxxxxxxxxxxx HERE xxxxxxxxxxxxxxxx\");\r\n                            updateOffices({});\r\n                        })\r\n                        // -------------------------------------------------------------\r\n                    }else{\r\n                        console.log('Invalid User ID.')\r\n                    }\r\n                }\r\n            )\r\n            \r\n\r\n            console.log(\"subscribe success\");\r\n\r\n            if (mediaType === \"audio\") {\r\n                usersList.push(\"\"+user.uid);\r\n                setRemoteUsers(usersList);\r\n                if(user.uid == 27 || user.uid == 25){\r\n                    user.audioTrack.setVolume(15);\r\n                }else{\r\n                    user.audioTrack.setVolume(125);\r\n                }\r\n                user.audioTrack?.play();\r\n                updateUsers([]);\r\n            }\r\n\r\n        });\r\n\r\n        client.on(\"user-unpublished\", (user, type) => {\r\n            console.log(\"unpublished\", user, type);\r\n            if (type === \"audio\") {\r\n                user.audioTrack?.stop();\r\n            }\r\n        });\r\n\r\n        client.on(\"user-left\", (user) => {\r\n            var tmp = [];\r\n            for(var x = 0; x < usersList.length; x++){\r\n                if(usersList[x] !== \"\"+user.uid ){\r\n                    tmp.push(usersList[x]);\r\n                }\r\n            }\r\n            usersList = tmp;\r\n            setRemoteUsers(tmp);\r\n            console.log(\"leaving\", user);\r\n            updateUsers([]);\r\n        });\r\n        console.log(\"JOINING...\");\r\n        await client.join(appId, channel, token, uid);\r\n        console.log(\"JOINED.\");\r\n        console.log(\"TRACK PRE PUB: \"+track);\r\n        if (track){ \r\n            console.log(\"PUBLISHING.\");\r\n            await client.publish(track);\r\n        }\r\n    };\r\n\r\n    let join = async (room) => {\r\n        console.log(\"--------------------- JOIN ---------------------\");\r\n        if(currentRoom !== room){\r\n            if(currRoom !== ''){\r\n                console.log(\"LEAVE ROOM\");\r\n                await leave(\"room\");\r\n            }\r\n            changeCurrentRoomTo(room);\r\n            currRoom = room;\r\n\r\n            setRemoteUsers([]);\r\n            usernameList = [];\r\n            if(client.connectionState !== 'CONNECTED'){\r\n                console.log(\"init ready\");\r\n                await init(channel);\r\n            }\r\n\r\n            /* ADD USER TO ROOM IN DB */\r\n            // Get ID of current office\r\n            var currentOfficeID = null;\r\n            for(var i=0;i<officeIDs.length;i++){\r\n                if(officeIDs[i][1] === currOffice){\r\n                    currentOfficeID = officeIDs[i][0];\r\n                }\r\n            }\r\n\r\n            // Get ID of current Room\r\n            var currentRoomID = null;\r\n            for(i=0;i<roomIDs.length;i++){\r\n                if(roomIDs[i][1] === room){\r\n                    currentRoomID = roomIDs[i][0];\r\n                }\r\n            }\r\n            \r\n            fetchJoinRoom(currentRoomID, currentOfficeID).then(res => {\r\n                    if(res.status === 400){\r\n                        console.log('Invalid JWT or Office/Room ID.')\r\n                    }else{\r\n                        console.log(\"JOINED ROOM: \"+room);\r\n                    }\r\n                }\r\n            )\r\n        }else{\r\n            await leave(\"room\");\r\n        }\r\n    }\r\n\r\n    async function leave(type){\r\n        console.log(\"--------------------- LEAVE ---------------------\");\r\n        client.on(\"user-published\", async (user, mediaType) => {\r\n            await client.unsubscribe(user, mediaType);\r\n            console.log(\"unsubscribe success\");\r\n            if (mediaType === \"audio\") {\r\n                user.audioTrack?.stop();\r\n            }\r\n        });\r\n\r\n        client.on(\"user-unpublished\", (user, type) => {\r\n            console.log(\"unpublished\", user, type);\r\n            if (type === \"audio\") {\r\n                user.audioTrack?.stop();\r\n                user.audioTrack?.close();\r\n            }\r\n        });\r\n\r\n        client.on(\"user-left\", (user) => {\r\n            console.log(\"leaving\", user);\r\n        });\r\n\r\n        /* REMOVE USER FROM ROOM IN DB */\r\n        // Get ID of current office\r\n        var currentOfficeID = null;\r\n        for(var i=0;i<officeIDs.length;i++){\r\n            if(officeIDs[i][1] === currOffice){\r\n                currentOfficeID = officeIDs[i][0];\r\n            }\r\n        }\r\n        console.log(\"Current Office: \"+currentOfficeID);\r\n        // Get ID of current Room\r\n        var currentRoomID = null;\r\n        for(i=0;i<roomIDs.length;i++){\r\n            if(roomIDs[i][1] === currRoom){\r\n                currentRoomID = roomIDs[i][0];\r\n            }\r\n        }\r\n        console.log(\"Current Room: \"+currentRoomID);\r\n        fetchLeaveRoom(currentRoomID, currentOfficeID).then(res => {\r\n            if(res.status === 400){\r\n                console.log('Invalid JWT or Office/Room ID.')\r\n            }else{\r\n                console.log(\"LEFT ROOM: \"+currentRoom);\r\n                currRoom = '';\r\n            }\r\n            console.log(\"FETCH COMPLETE\");\r\n        })\r\n        \r\n        if(type === \"office\"){\r\n            changeCurrentOfficeTo('');\r\n            currOffice = '';\r\n        }\r\n\r\n        usersList = [];\r\n        userIDsAndRooms = [];\r\n        setRemoteUsers([]);\r\n        await client.unpublish();\r\n        await client.leave();\r\n        changeCurrentRoomTo('');\r\n        setCurrentOfficeInvite('');\r\n        currRoom = '';\r\n    };\r\n\r\n    let joinOffice = async (name) => {\r\n        console.log(\"--------------------- JOIN OFFICE ---------------------\");\r\n        if(currentRoom !== ''){\r\n            leave(\"office\");\r\n            changeCurrentRoomTo('');\r\n        }\r\n        changeCurrentOfficeTo(name);\r\n        currOffice = name;\r\n\r\n        roomsList = [];\r\n        roomIDs = [];\r\n        // ------------------ GET ROOMS IN CURRENT OFFICE ------------------\r\n        var currentOfficeID = null;\r\n        for(var i=0;i<officeIDs.length;i++){\r\n            if(officeIDs[i][1] === name){\r\n                currentOfficeID = officeIDs[i][0];\r\n            }\r\n        }\r\n\r\n        fetchOfficeRooms(currentOfficeID).then(result => {\r\n            if(result != null && result.Rooms != null)\r\n            {\r\n                for(var x=0;x<result.Rooms.length;x++){\r\n                    const room = \"\"+result.Rooms[x].roomName;\r\n                    const id = \"\"+result.Rooms[x].id;\r\n                    const newRoomButton = <Button style={{width: \"50%\"}} variant=\"secondary\" key={id} block onClick={ async () => {await join(room)} }>{room}</Button>;\r\n                    if(roomsList.length < result.Rooms.length){\r\n                        roomsList.push(newRoomButton)\r\n                        roomIDs.push([id,room]);\r\n                    }\r\n                }\r\n                updateOffices([]);\r\n            }\r\n            else\r\n            {\r\n                console.log('Invalid JWT.');\r\n            }\r\n            updateOffices([]);\r\n        })\r\n        // ------------------------------------------------------------------\r\n        \r\n    }\r\n\r\n    async function updateUserOfficeList(){\r\n        fetchUserOffices().then(result => {\r\n            if(result != null && result.Offices != null)\r\n            {\r\n                /* SET VALUES FROM RESPONSE */\r\n                for(var x=0;x<result.Offices.length;x++){\r\n                    const office = \"\"+result.Offices[x].name;\r\n                    const id = \"\"+result.Offices[x].id;\r\n                    const invite = \"\" + result.Offices[x].invite;\r\n                    const newOfficeButton = <Row key={id}><Col><Button variant=\"primary\" block onClick={ async () => {await joinOffice(office); updateOffices([]); updateRooms([]); setCurrentOfficeInvite(invite); } }>{office}</Button></Col></Row>;\r\n                    if(officesList.length < result.Offices.length){\r\n                        officesList.push(newOfficeButton)\r\n                        officeIDs.push([id,office]);\r\n                    }\r\n                }\r\n                officesCollected = true;\r\n                console.log(\"OFFICES RETRIEVED.\")\r\n            }\r\n            else\r\n            {\r\n                console.log('Invalid JWT.');\r\n            } \r\n            updateOffices([]);\r\n        })\r\n    }\r\n\r\n    function getUserOffices(){\r\n        console.log(\"--------------------- GET USER OFFICES ---------------------\");\r\n        var tmp = [];\r\n        for (var i=0;i<officesList.length;i++){\r\n            if(!tmp.includes(officesList[i])){\r\n                tmp.push(officesList[i]);\r\n                tmp.push(<br key={i}></br>)\r\n            }\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    function getOfficeRooms(){\r\n        console.log(\"--------------------- GET OFFICE ROOMS ---------------------\");\r\n        var tmp = [];\r\n        for (var i=0;i<roomsList.length;i++){\r\n            if(!tmp.includes(roomsList[i])){\r\n                tmp.push([roomsList[i]]);\r\n                tmp.push(<br key={i}></br>)\r\n            }\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n\r\n    function getRemoteUsers(){\r\n        console.log(\"--------------------- GET REMOTE USERS ---------------------\");\r\n        var users = [];\r\n        usersList = [];\r\n        var userNames = [];\r\n        if(username !== null && currentRoom !== ''){\r\n            userNames.push(\"\"+username+\"\\n\");\r\n        }\r\n        \r\n        if(remoteUsers.length !== 0){\r\n            for(var i=0;i<remoteUsers.length;i++){\r\n                if(!users.includes(\"\\n\"+remoteUsers[i])){\r\n                    users.push(\"\\n\"+remoteUsers[i]);\r\n                    usersList.push(\"\"+remoteUsers[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!users.includes(\"\\n\"+uid)){\r\n            users.push(\"\\n\"+uid);\r\n            usersList.push(\"\"+uid);  \r\n        }\r\n        \r\n        // SEPARATING USERS INTO ROOMS (BUGGY...)\r\n        /*var userRooms = [];\r\n        for(var a=0;a<usersList.length;a++){\r\n            console.log(\"---- 1 ----\");\r\n            for(var k=0;k<userIDsAndRooms;k++){\r\n                console.log(\"---- 2 ----\");\r\n                if(usersList[a] == userIDsAndRooms[k][0]){\r\n                    console.log(\"---- 3 ----\");\r\n                    for(var p=0;p<roomIDs.length;p++){\r\n                        console.log(\"---- 5 ----\");\r\n                        if(userIDsAndRooms[k][1] == roomIDs[p][0]){\r\n                            console.log(\"---- 6 ----\");\r\n                            if(!userRooms.includes([\"\"+usersList[a], \"\"+roomIDs[p][1]])){\r\n                                console.log(\"---- 7 ----\");\r\n                                userRooms.push([\"\"+usersList[a], \"\"+roomIDs[p][1]]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }*/\r\n        \r\n        for(var x=0;x<usernameList.length;x++){\r\n            if(usersList.includes(\"\"+usernameList[x][0]) && !userNames.includes(\"\"+usernameList[x][1]+\"\\n\")){\r\n                //for(var z=0;z<userRooms.length;i++){\r\n                    //if(userRooms[z][0] == usernameList[x][0]){\r\n                        //userNames.push(\"\"+usernameList[x][1]+\"(\"+userRooms[z][1]+\")\\n\");\r\n                        userNames.push(\"\"+usernameList[x][1]+\"\\n\");\r\n                        console.log(userNames);\r\n                    //}\r\n                //}\r\n            }\r\n        }\r\n\r\n        return userNames;\r\n    }\r\n\r\n    // ------------------------ FETCH FUNCTIONS ------------------------\r\n    async function fetchRemoteUserRoom(userID) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ jwt: userJWT, userID: userID })\r\n        };\r\n        \r\n        const res = await fetch(apiURL+\"/api/room/findUser\", requestOptions)\r\n        const results = await res.json();\r\n        return results;\r\n    }\r\n\r\n    async function fetchUserOffices() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ jwt: userJWT })\r\n        };\r\n        \r\n        const res = await fetch(apiURL+\"/api/office/getUserOffices\", requestOptions)\r\n        const results = await res.json();\r\n        return results;\r\n    }\r\n    \r\n    async function fetchUserDetails() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ jwt: userJWT })\r\n        };\r\n\r\n        const res = await fetch(apiURL+\"/api/user/details\", requestOptions)\r\n        const results = await res.json();\r\n        return results;\r\n    }\r\n\r\n    async function fetchRemoteUsernames(user) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id: user.uid+\"\" })\r\n        };\r\n\r\n        const res = await fetch(apiURL+\"/api/user/getUsernameById\", requestOptions)\r\n        const results = await res.json();\r\n        return results;\r\n    }\r\n\r\n    async function fetchJoinRoom(currentRoomID, currentOfficeID) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ jwt: userJWT, officeID: currentOfficeID, roomID: currentRoomID })\r\n        };\r\n\r\n        const res = await fetch(apiURL+\"/api/room/join\", requestOptions)\r\n        return res;\r\n    }\r\n\r\n    async function fetchLeaveRoom(currentRoomID, currentOfficeID) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ jwt: userJWT, officeID: currentOfficeID, roomID: currentRoomID })\r\n        };\r\n\r\n        const res = await fetch(apiURL+\"/api/room/leave\", requestOptions)\r\n        return res;\r\n    }\r\n\r\n    async function fetchOfficeRooms(currentOfficeID) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ jwt: userJWT, officeID: currentOfficeID })\r\n        };\r\n\r\n        const res = await fetch(apiURL+\"/api/room/getOfficeRooms\", requestOptions)\r\n        const results = await res.json();\r\n        return results;\r\n    }\r\n    // -----------------------------------------------------------------\r\n    return (\r\n        <>\r\n            <Col md={3} lg={2}>\r\n                <UserSideBar \r\n                    jwt={userJWT}\r\n                    officeSelected={currentOffice} \r\n                    leaveOffice={leave} \r\n                    getOffices={getUserOffices} \r\n                    joinOffice={joinOffice} \r\n                    updateOffices={updateOffices} \r\n                    updateRooms={updateRooms}\r\n                    currentOfficeInviteCode={currentOfficeInvite}\r\n                    updateUserOfficeList={updateUserOfficeList}\r\n                />\r\n            </Col>\r\n            <Col md={9} lg={10}>\r\n                <div id=\"TabbedPane\">\r\n                    {\r\n                        currentOffice === '' \r\n                        ? \r\n                        <center>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <h3>\r\n                                Please select an Office.\r\n                            </h3>\r\n                        </center>\r\n                        :\r\n                        <Tabs id=\"UserContent-tab\" activeKey={selectedTab} onSelect={(k) => setSelectedTab(k)}>\r\n                            <Tab eventKey=\"floorPlan\" title=\"Floor Plan\">\r\n                                <FloorPlan officeSelected={currentOffice} join={join} getRemoteUsers={getRemoteUsers} getOfficeRooms={getOfficeRooms} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"textChannel\" title=\"Text Channel\">\r\n                                <TextChannel officeSelected={currentOffice}/>\r\n                            </Tab>\r\n                        </Tabs>\r\n                    }\r\n                </div>\r\n            </Col>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserCenter\r\n"]},"metadata":{},"sourceType":"module"}