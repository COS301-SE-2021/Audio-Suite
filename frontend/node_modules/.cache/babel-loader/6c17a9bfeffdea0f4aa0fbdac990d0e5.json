{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\MEGA Drive\\\\Uni\\\\Third Year\\\\COS301\\\\Capstone\\\\Code\\\\Github\\\\Audio-Suite\\\\frontend\\\\src\\\\components\\\\Signup.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport validator from 'validator';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Modal from 'react-bootstrap/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Signup = ({\n  onChangePageType\n}) => {\n  _s();\n\n  const [show, setShow] = useState(false);\n  const [otp, set_otp] = useState('');\n  const [user_input_otp, set_user_input_otp] = useState('');\n  const [otp_status, set_otp_status] = useState('Please enter otp.');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [validFirstName, setValidFirstName] = useState(false);\n  const [validLastName, setValidLastName] = useState(false);\n  const [validUsername, setValidUsername] = useState(false);\n  const [validEmail, setValidEmail] = useState(false);\n  const [validPassword, setValidPassword] = useState(false);\n\n  const handleClose = () => {\n    if (otp === user_input_otp) {\n      const OTP_requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          firstName: firstName,\n          lastName: lastName,\n          userName: username,\n          email: email,\n          password: password\n        })\n      };\n      fetch(\"http://localhost:3001/api/register\", OTP_requestOptions).then(res => res.json()).then(result => {\n        //console.log(result);\n        console.log(\"User registered successfully.\");\n      });\n      setShow(false);\n      onChangePageType('loginPage');\n    } else {\n      set_otp_status('Invalid OTP given, please try again.');\n    }\n  };\n\n  const handleShow = event => {\n    event.preventDefault();\n\n    if (validFirstName && validLastName && validUsername && validEmail && validPassword) {\n      console.log(\"add User\");\n      console.log({\n        firstName: firstName,\n        lastName: lastName,\n        username: username,\n        email: email,\n        password: password\n      });\n      const OTP_requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          emailAddress: email,\n          userName: username\n        })\n      };\n      fetch(\"http://localhost:3001/api/notifications/sendVerification\", OTP_requestOptions).then(res => res.json()).then(result => {\n        console.log(result);\n        set_otp(result.otp);\n      });\n      setShow(true);\n    } else {\n      alert('Not all input fields are valid.');\n    }\n  };\n\n  const validateFirstName = event => {\n    setFirstName(event.target.value);\n\n    if (event.target.value !== '') {\n      setValidFirstName(true);\n    } else {\n      setValidFirstName(false);\n    }\n  };\n\n  const validateLastName = event => {\n    setLastName(event.target.value);\n\n    if (event.target.value !== '') {\n      setValidLastName(true);\n    } else {\n      setValidLastName(false);\n    }\n  };\n\n  const validateUsername = event => {\n    setUsername(event.target.value);\n\n    if (event.target.value !== '') {\n      setValidUsername(true);\n    } else {\n      setValidUsername(false);\n    }\n  };\n\n  const validateEmail = event => {\n    setEmail(event.target.value);\n\n    if (validator.isEmail(event.target.value)) {\n      setValidEmail(true);\n      console.log(event.target.value, \" Valid email\");\n    } else {\n      setValidEmail(false);\n    }\n  };\n\n  const validatePassword = event => {\n    setPassword(event.target.value);\n\n    if (validator.isStrongPassword(event.target.value, {\n      minLength: 8,\n      minLowercase: 1,\n      minUppercase: 1,\n      minNumbers: 1,\n      minSymbols: 1,\n      returnScore: false\n    })) {\n      setValidPassword(true);\n      console.log(event.target.value, \" Valid password\");\n    } else {\n      setValidPassword(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 1,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              onSubmit: handleShow,\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicFirstName\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"First Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"First Name\",\n                  value: firstName,\n                  onChange: event => validateFirstName(event)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicLastName\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Last Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Last Name\",\n                  value: lastName,\n                  onChange: event => validateLastName(event)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicUsername\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Username\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Username\",\n                  value: username,\n                  onChange: event => validateUsername(event)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicEmail\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Email address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"email\",\n                  placeholder: \"Enter email\",\n                  value: email,\n                  onChange: event => validateEmail(event)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"We'll never share your email with anyone else.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicPassword\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"password\",\n                  placeholder: \"Password\",\n                  value: password,\n                  onChange: event => validatePassword(event)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                type: \"submit\",\n                children: \"Sign up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 1,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: show,\n        onHide: handleClose,\n        backdrop: \"static\",\n        keyboard: false,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Modal title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicOTP\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: otp_status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"OTP\",\n              value: user_input_otp,\n              onChange: event => {\n                set_user_input_otp(event.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleClose,\n            children: \"Confirm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Signup, \"RMBRyI/wvxeNameDwPD32tbDMsM=\");\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["C:/Users/chris/Desktop/MEGA Drive/Uni/Third Year/COS301/Capstone/Code/Github/Audio-Suite/frontend/src/components/Signup.js"],"names":["useState","validator","Form","Button","Container","Row","Col","Modal","Signup","onChangePageType","show","setShow","otp","set_otp","user_input_otp","set_user_input_otp","otp_status","set_otp_status","firstName","setFirstName","lastName","setLastName","username","setUsername","email","setEmail","password","setPassword","validFirstName","setValidFirstName","validLastName","setValidLastName","validUsername","setValidUsername","validEmail","setValidEmail","validPassword","setValidPassword","handleClose","OTP_requestOptions","method","headers","body","JSON","stringify","userName","fetch","then","res","json","result","console","log","handleShow","event","preventDefault","emailAddress","alert","validateFirstName","target","value","validateLastName","validateUsername","validateEmail","isEmail","validatePassword","isStrongPassword","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport validator from 'validator'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nconst Signup = ({onChangePageType}) => {\r\n    const [show, setShow] = useState(false);\r\n    const [otp, set_otp] = useState('');\r\n    const [user_input_otp, set_user_input_otp] = useState('');\r\n    const [otp_status, set_otp_status] = useState('Please enter otp.');\r\n\r\n    const [firstName, setFirstName] = useState('')\r\n    const [lastName, setLastName] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [validFirstName, setValidFirstName] = useState(false)\r\n    const [validLastName, setValidLastName] = useState(false)\r\n    const [validUsername, setValidUsername] = useState(false)\r\n    const [validEmail, setValidEmail] = useState(false)\r\n    const [validPassword, setValidPassword] = useState(false)\r\n\r\n    const handleClose = () => \r\n    {\r\n        if(otp === user_input_otp)\r\n        {\r\n            const OTP_requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ firstName: firstName, lastName: lastName, userName: username, email: email, password: password})\r\n            };\r\n\r\n            fetch(\"http://localhost:3001/api/register\", OTP_requestOptions)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    //console.log(result);\r\n                    console.log(\"User registered successfully.\");\r\n                }\r\n            )\r\n            \r\n            setShow(false);\r\n            onChangePageType('loginPage')\r\n        }\r\n        else\r\n        {\r\n            set_otp_status('Invalid OTP given, please try again.')\r\n        }\r\n    }\r\n\r\n\r\n    const handleShow = (event) => {\r\n        event.preventDefault();\r\n        if(\r\n            validFirstName && \r\n            validLastName && \r\n            validUsername && \r\n            validEmail && \r\n            validPassword)\r\n        {\r\n            console.log(\"add User\")\r\n            console.log({\r\n                firstName: firstName, \r\n                lastName: lastName, \r\n                username: username, \r\n                email: email,\r\n                password: password\r\n            })\r\n            \r\n            const OTP_requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ emailAddress: email, userName: username})\r\n            };\r\n\r\n            fetch(\"http://localhost:3001/api/notifications/sendVerification\", OTP_requestOptions)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    console.log(result);\r\n                    set_otp(result.otp);\r\n                }\r\n            )\r\n\r\n            setShow(true);\r\n        }\r\n        else\r\n        {\r\n            alert('Not all input fields are valid.')\r\n        }\r\n    }\r\n\r\n    const validateFirstName = (event) => \r\n    {\r\n        setFirstName(event.target.value)\r\n        if(event.target.value !== '')\r\n        {\r\n            setValidFirstName(true)\r\n        }\r\n        else\r\n        {\r\n            setValidFirstName(false)\r\n        }\r\n    }\r\n\r\n    const validateLastName = (event) => \r\n    {\r\n        setLastName(event.target.value)\r\n        if(event.target.value !== '')\r\n        {\r\n            setValidLastName(true)\r\n        }\r\n        else\r\n        {\r\n            setValidLastName(false)\r\n        }\r\n    }\r\n\r\n    const validateUsername = (event) => \r\n    {\r\n        setUsername(event.target.value)\r\n        if(event.target.value !== '')\r\n        {\r\n            setValidUsername(true)\r\n        }\r\n        else\r\n        {\r\n            setValidUsername(false)\r\n        }\r\n    }\r\n\r\n    const validateEmail = (event) =>\r\n    {\r\n        setEmail(event.target.value)\r\n        if(validator.isEmail(event.target.value))\r\n        {\r\n            setValidEmail(true)\r\n            console.log(event.target.value, \" Valid email\")\r\n        }\r\n        else\r\n        {\r\n            setValidEmail(false)\r\n        }\r\n    }\r\n\r\n    const validatePassword = (event) =>\r\n    {\r\n        setPassword(event.target.value)\r\n        if(validator.isStrongPassword(\r\n            event.target.value, \r\n            {\r\n                minLength: 8, \r\n                minLowercase: 1, \r\n                minUppercase: 1, \r\n                minNumbers: 1, \r\n                minSymbols: 1, \r\n                returnScore: false\r\n            }))\r\n        {\r\n            setValidPassword(true)\r\n            console.log(event.target.value, \" Valid password\")\r\n        }\r\n        else\r\n        {\r\n            setValidPassword(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={1} md={4}></Col>\r\n                        <Col xs={10} md={4}>\r\n                            <Form onSubmit={handleShow}>\r\n                                <Form.Group controlId=\"formBasicFirstName\">\r\n                                    <Form.Label>First Name</Form.Label>\r\n                                    <Form.Control \r\n                                    type=\"text\" \r\n                                    placeholder=\"First Name\" \r\n                                    value={firstName}\r\n                                    onChange={(event) => validateFirstName(event)}/>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicLastName\">\r\n                                    <Form.Label>Last Name</Form.Label>\r\n                                    <Form.Control \r\n                                    type=\"text\" \r\n                                    placeholder=\"Last Name\" \r\n                                    value={lastName}\r\n                                    onChange={(event) => validateLastName(event)}/>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicUsername\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control \r\n                                    type=\"text\" \r\n                                    placeholder=\"Username\" \r\n                                    value={username}\r\n                                    onChange={(event) => validateUsername(event)}/>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Email address</Form.Label>\r\n                                    <Form.Control \r\n                                    type=\"email\" \r\n                                    placeholder=\"Enter email\" \r\n                                    value={email}\r\n                                    onChange={(event) => validateEmail(event)}/>\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        We'll never share your email with anyone else.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicPassword\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control \r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                    value={password}\r\n                                    onChange={(event) => validatePassword(event)}/>\r\n                                </Form.Group>\r\n\r\n                                <Button variant=\"primary\" type=\"submit\">\r\n                                    Sign up\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                        <Col xs={1} md={4}></Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Modal\r\n                    show={show}\r\n                    onHide={handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Modal title</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                    <Form.Group controlId=\"formBasicOTP\">\r\n                        <Form.Label>{otp_status}</Form.Label>\r\n                        <Form.Control \r\n                            type=\"text\" \r\n                            placeholder=\"OTP\" \r\n                            value={user_input_otp}\r\n                            onChange={(event) => {set_user_input_otp(event.target.value)}}/>\r\n                    </Form.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={handleClose}>Confirm</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup"]},"metadata":{},"sourceType":"module"}