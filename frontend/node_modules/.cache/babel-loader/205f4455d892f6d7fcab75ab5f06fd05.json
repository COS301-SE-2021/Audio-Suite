{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\MEGA Drive\\\\Uni\\\\Third Year\\\\COS301\\\\Capstone\\\\Code\\\\Github\\\\Audio-Suite\\\\frontend\\\\src\\\\components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport validator from 'validator';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = ({\n  setJWT,\n  onLogin,\n  onChangePageType\n}) => {\n  _s();\n\n  const apiURL = \"http://127.0.0.1:3001\";\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [validEmail, setValidEmail] = useState(false);\n  const [validPassword, setValidPassword] = useState(false);\n\n  const validateUserCredentials = event => {\n    event.preventDefault();\n\n    if (validEmail && validPassword) {\n      console.log(\"Log user in!\");\n      const Login_requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      };\n      fetch(apiURL + \"/api/login\", Login_requestOptions).then(res => res.json()).then(result => {\n        if (result.response === 'Success') {\n          setJWT(result.jwt);\n          onLogin('userPage');\n        } else {\n          alert('Invalid User credentials.');\n        }\n      });\n    } else {\n      alert('Not all input fields are valid.');\n    }\n  };\n\n  const validateEmail = event => {\n    setEmail(event.target.value);\n\n    if (validator.isEmail(event.target.value)) {\n      setValidEmail(true);\n      console.log(\"Email valid.\");\n    } else {\n      setValidEmail(false);\n    }\n  };\n\n  const validatePassword = event => {\n    setPassword(event.target.value);\n\n    if (validator.isStrongPassword(event.target.value, {\n      minLength: 8,\n      minLowercase: 1,\n      minUppercase: 1,\n      minNumbers: 1,\n      minSymbols: 1,\n      returnScore: false\n    })) {\n      setValidPassword(true);\n      console.log(\"Password Valid.\");\n    } else {\n      setValidPassword(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 1,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              onSubmit: validateUserCredentials,\n              children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicEmail\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Email address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"email\",\n                  placeholder: \"Enter email\",\n                  value: email,\n                  onChange: event => validateEmail(event)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"We'll never share your email with anyone else.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicPassword\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"password\",\n                  placeholder: \"Password\",\n                  value: password,\n                  onChange: event => validatePassword(event)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                type: \"submit\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Don't have an account yet?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                type: \"button\",\n                onClick: () => onChangePageType('signupPage'),\n                children: \"Sign up.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 1,\n            md: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"IWT0IkdfigrjsKa8aYh/NAVg/x8=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/chris/Desktop/MEGA Drive/Uni/Third Year/COS301/Capstone/Code/Github/Audio-Suite/frontend/src/components/Login.js"],"names":["useState","validator","Form","Button","Container","Row","Col","Login","setJWT","onLogin","onChangePageType","apiURL","email","setEmail","password","setPassword","validEmail","setValidEmail","validPassword","setValidPassword","validateUserCredentials","event","preventDefault","console","log","Login_requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","result","response","jwt","alert","validateEmail","target","value","isEmail","validatePassword","isStrongPassword","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport validator from 'validator'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nconst Login = ({setJWT, onLogin, onChangePageType}) => {\r\n\r\n    const apiURL = \"http://127.0.0.1:3001\";\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [validEmail, setValidEmail] = useState(false)\r\n    const [validPassword, setValidPassword] = useState(false)\r\n\r\n    const validateUserCredentials = (event) => \r\n    {\r\n        event.preventDefault()\r\n        if(validEmail && validPassword)\r\n        {\r\n            console.log(\"Log user in!\")\r\n\r\n            const Login_requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email: email, password: password })\r\n            };\r\n\r\n            fetch(apiURL+\"/api/login\", Login_requestOptions)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if(result.response === 'Success')\r\n                    {\r\n                        setJWT(result.jwt);\r\n                        onLogin('userPage');\r\n                    }\r\n                    else\r\n                    {\r\n                        alert('Invalid User credentials.')\r\n                    }\r\n                }\r\n            )\r\n        }\r\n        else\r\n        {\r\n            alert('Not all input fields are valid.')\r\n        }\r\n    }\r\n\r\n    const validateEmail = (event) =>\r\n    {\r\n        setEmail(event.target.value)\r\n        if(validator.isEmail(event.target.value))\r\n        {\r\n            setValidEmail(true)\r\n            console.log(\"Email valid.\")\r\n        }\r\n        else\r\n        {\r\n            setValidEmail(false)\r\n        }\r\n    }\r\n\r\n    const validatePassword = (event) =>\r\n    {\r\n        setPassword(event.target.value)\r\n        if(validator.isStrongPassword(\r\n            event.target.value, \r\n            {\r\n                minLength: 8, \r\n                minLowercase: 1, \r\n                minUppercase: 1, \r\n                minNumbers: 1, \r\n                minSymbols: 1, \r\n                returnScore: false\r\n            }))\r\n        {\r\n            setValidPassword(true)\r\n            console.log(\"Password Valid.\")\r\n        }\r\n        else\r\n        {\r\n            setValidPassword(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={1} md={4}></Col>\r\n                        <Col xs={10} md={4}>\r\n                            <Form onSubmit={validateUserCredentials}>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Email address</Form.Label>\r\n                                    <Form.Control \r\n                                    type=\"email\" \r\n                                    placeholder=\"Enter email\" \r\n                                    value={email}\r\n                                    onChange={(event) => validateEmail(event)}/>\r\n                                    <Form.Text className=\"text-muted\">\r\n                                        We'll never share your email with anyone else.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"formBasicPassword\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control \r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                    value={password}\r\n                                    onChange={(event) => validatePassword(event)}/>\r\n                                </Form.Group>\r\n\r\n                                <Button variant=\"primary\" type=\"submit\">\r\n                                    Login\r\n                                </Button>\r\n\r\n                                <br></br>\r\n                                <br></br>\r\n                                <p>\r\n                                    Don't have an account yet?\r\n                                </p>\r\n                                \r\n                                <Button variant=\"primary\" type=\"button\" onClick={() => onChangePageType('signupPage')}>\r\n                                    Sign up.\r\n                                </Button>\r\n                            </Form>\r\n                        </Col>\r\n                        <Col xs={1} md={4}></Col>\r\n                    </Row>\r\n                </Container>\r\n            </center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n"]},"metadata":{},"sourceType":"module"}